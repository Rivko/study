////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2018 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  camxifedualpd10.h
/// @brief camxifedualpd10 class declarations
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef CAMXIFEDUALPD10_H
#define CAMXIFEDUALPD10_H

#include "camxispiqmodule.h"
#include "iqcommondefs.h"
#include "titan170_ife.h"

CAMX_NAMESPACE_BEGIN

CAMX_BEGIN_PACKED

struct IFEDUALPD10ModuleEnable
{
    IFE_IFE_0_VFE_MODULE_DUAL_PD_EN pdModuleEnable;     ///< PD Module enable
} CAMX_PACKED;

/// @brief IFE DUALPD10 Module Dependence Data
struct IFEDUALPD10RegCmd
{
    IFE_IFE_0_VFE_DUAL_PD_CFG               pdCfg;              ///< pdCfg
    IFE_IFE_0_VFE_DUAL_PD_CROP_WIDTH_CFG    pdCropWidthCfg;     ///< pdCropWidthCfg
    IFE_IFE_0_VFE_DUAL_PD_CROP_HEIGHT_CFG   pdCropHeightCfg;    ///< pdCropHeightCfg
    IFE_IFE_0_VFE_DUAL_PD_BLS_CFG           pdBLSCfg;           ///< pdBLSCfg
    IFE_IFE_0_VFE_DUAL_PD_RGN_OFFSET_CFG    pdRegionOffsetCfg;  ///< pdRegionOffsetCfg
    IFE_IFE_0_VFE_DUAL_PD_RGN_NUM_CFG       pdRegionNumberCfg;  ///< pdRegionNumberCfg
    IFE_IFE_0_VFE_DUAL_PD_RGN_SIZE_CFG      pdRegionSizeCfg;    ///< pdRegionSizeCfg
    IFE_IFE_0_VFE_DUAL_PD_HDR_CFG           pdHDRCfg;           ///< pdHDRCfg
    IFE_IFE_0_VFE_DUAL_PD_BIN_SKIP_CFG      pdBinSkipCfg;       ///< pdBinSkipCfg
    IFE_IFE_0_VFE_DUAL_PD_GM_CFG_0          pdGMCfg0;           ///< pdGMCfg0
    IFE_IFE_0_VFE_DUAL_PD_GM_CFG_1          pdGMCfg1;           ///< pdGMCfg1
    IFE_IFE_0_VFE_DUAL_PD_GM_CFG_2          pdGMCfg2;           ///< pdGMCfg2
    IFE_IFE_0_VFE_DUAL_PD_GM_CFG_3          pdGMCfg3;           ///< pdGMCfg3
    IFE_IFE_0_VFE_DUAL_PD_IIR_CFG_0         pdIIRCfg0;          ///< pdIIRCfg0
    IFE_IFE_0_VFE_DUAL_PD_IIR_CFG_1         pdIIRCfg1;          ///< pdIIRCfg1
    IFE_IFE_0_VFE_DUAL_PD_IIR_CFG_2         pdIIRCfg2;          ///< pdIIRCfg2
    IFE_IFE_0_VFE_DUAL_PD_IIR_CFG_3         pdIIRCfg3;          ///< pdIIRCfg3
    IFE_IFE_0_VFE_DUAL_PD_SAD_PHASE_CFG_0   pdSADPhaseCfg0;     ///< pdSADPhaseCfg0
    IFE_IFE_0_VFE_DUAL_PD_SAD_PHASE_CFG_1   pdSADPhaseCfg1;     ///< pdSADPhaseCfg1
} CAMX_PACKED;

CAMX_END_PACKED

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief Class for IFE DUALPD10 Module
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class IFEDUALPD10 final : public ISPIQModule
{
public:
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Create
    ///
    /// @brief  Create IFEDUALPD10 Object
    ///
    /// @param  pCreateData Pointer to data for CTS Creation
    ///
    /// @return CamxResultSuccess if successful
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static CamxResult Create(
        IFEModuleCreateData* pCreateData);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Execute
    ///
    /// @brief  Generate Settings for DUALPD10 Object
    ///
    /// @param  pInputData Pointer to the Inputdata
    ///
    /// @return CamxResultSuccess if successful.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual CamxResult Execute(
        ISPInputData* pInputData);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetRegCmd
    ///
    /// @brief  Retrieve the buffer of the register value
    ///
    /// @return Pointer of the register buffer
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual VOID* GetRegCmd();

protected:
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// ~IFEDUALPD10
    ///
    /// @brief  Destructor
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ~IFEDUALPD10();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// IFEDUALPD10
    ///
    /// @brief  Constructor
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    IFEDUALPD10();

private:
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// CheckDependenceChange
    ///
    /// @brief  Check if the Dependence Data has changed
    ///
    /// @param  pInputData Pointer to the Input Data
    ///
    /// @return CamxResultSuccess if successful
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL CheckDependenceChange(
        ISPInputData* pInputData);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// RunCalculation
    ///
    /// @brief  Perform the Interpolation and Calculation
    ///
    /// @param  pInputData Pointer to the Module Input data
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    CamxResult RunCalculation(
        const ISPInputData* pInputData);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// DUALPD10CalculateSetting
    ///
    /// @brief  Calculate the setting for hardware
    ///
    /// @param  pInputData Pointer to the Module Input data
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    VOID DUALPD10CalculateSetting(
        const ISPInputData* pInputData);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// CreateCmdList
    ///
    /// @brief  Generate the Command List
    ///
    /// @param  pInputData Pointer to the Input Data
    ///
    /// @return CamxResultSuccess if successful
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    CamxResult CreateCmdList(
        ISPInputData* pInputData);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// UpdateIFEInternalData
    ///
    /// @brief  Update IFE internal data
    ///
    /// @param  pInputData Pointer to the ISP input data
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    VOID UpdateIFEInternalData(
        ISPInputData* pInputData);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// DumpRegConfig
    ///
    /// @brief  Print register configuration of Crop module for debug
    ///
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    VOID DumpRegConfig();

    IFEDUALPD10RegCmd       m_regCmd;                    ///< Register List of this Module
    IFEDUALPD10ModuleEnable m_pdModuleEnable;            ///< Register for PD module Enable

    IFEDUALPD10(const IFEDUALPD10&)            = delete; ///< Disallow the copy constructor
    IFEDUALPD10& operator=(const IFEDUALPD10&) = delete; ///< Disallow assignment operator
};

CAMX_NAMESPACE_END
#endif // CAMXIFEDUALPD10_H
